#include <ros/ros.h>
#include <kobuki_msgs/BumperEvent.h>
#include <sensor_msgs/Image.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#define _USE_MATH_DEFINES
#include <math.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>

using namespace cv;
ros::Subscriber sub_bumper;

ros::Publisher pub_twist;
ros::Publisher pub_accl;

void clbk_bumper(const kobuki_msgs::BumperEvent::ConstPtr& msg)
{
    if (msg->state == kobuki_msgs::BumperEvent::PRESSED)
    {
        ros::Duration(0.5).sleep();
        
        if (msg->bumper == 1)
        {
            ROS_INFO("Center bumper activated!");

            for (int z = 0; z < 2; z++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = -0.3;
                msg.angular.z = 0;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }
            
            ros::Duration(1).sleep();

            for (int x = 0; x < 2; x++)
            {        
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = 1.58;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }
            
            ros::Duration(1).sleep();

            for (int c = 0; c < 4; c++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0.5;
                msg.angular.z = 0;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }
            
            ros::Duration(1).sleep();

            for (int v = 0; v < 2; v++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = 1.58;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();

        }

        else if (msg->bumper == 0)
        {
            ROS_INFO("Left bumper activated!");

            //indsæt left bumper resultat her
        }
    
        else if (msg->bumper == 2)
        {
            ROS_INFO("Right bumper activated!");

            //indsæt right bumper resultat her        
        }
    }
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "Hello World");
    ros::NodeHandle n;
    sub_bumper = n.subscribe("/mobile_base/events/bumper", 1, clbk_bumper);
    pub_twist = n.advertise<geometry_msgs::Twist>("/cmd_vel_mux/input/teleop", 1000);
    pub_accl = n.advertise<geometry_msgs::Accel>("/cmd_vel_mux/input/teleop", 1000);
    
    for (int i = 1; ros::ok && i > 0; i++)
    {
        geometry_msgs::Twist msg;
        msg.linear.x = 0.5;
        msg.angular.z = 0;
        pub_twist.publish(msg);
        ros::Duration(0.5).sleep();
        ros::spinOnce();
    }

    return 0;
}
