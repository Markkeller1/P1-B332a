#include <ros/ros.h>
#include <kobuki_msgs/BumperEvent.h>
#include <sensor_msgs/Image.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#define _USE_MATH_DEFINES
#include <math.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>

using namespace cv;
ros::Subscriber sub_bumper;
ros::Publisher pub_twist;
ros::Publisher pub_accl;

int dist = 0, total_dist;
bool flag = true, f = true;







void route_bot()
{
 ros::Duration(1).sleep();
        
    if (total_dist == dist)
    {
        ROS_INFO("God ide Simon.");

        dist = 0;

        if (flag)
        {
            for (int i = 0; i < 3; i++)
            {        
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = 1.4;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();

            for (int i = 0; i < 2; i++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0.5;
                msg.angular.z = 0;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();

            for (int i = 0; i < 3; i++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = 1.4;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }
            
            ros::Duration(1).sleep();
            flag = !flag;
        }
        
        else
        {
            ros::Duration(1).sleep();

            for (int i = 0; i < 3; i++)
            {        
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = -1.4;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();

            for (int i = 0; i < 2; i++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0.5;
                msg.angular.z = 0;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();

            for (int i = 0; i < 3; i++)
            {
                geometry_msgs::Twist msg;
                msg.linear.x = 0;
                msg.angular.z = -1.4;
                pub_twist.publish(msg);
                ros::Duration(0.5).sleep();
            }

            ros::Duration(1).sleep();
            flag = !flag;
        }
    }   
}








void clbk_bumper(const kobuki_msgs::BumperEvent::ConstPtr& msg)
{
    ROS_INFO ("Detter er clbk_bumper");
    if (msg->state == kobuki_msgs::BumperEvent::PRESSED)
    {
        ros::Duration(1).sleep();
        
        if (msg->bumper < 3)
        {
            ROS_INFO("Center bumper activated!");
            if (f)
            {
                f = !f;
                dist = dist -6;
                total_dist = dist;
            }

            dist = 0;

            if (flag)
            {
                for (int i = 0; i < 2; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = -0.3;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 3; i++)
                {        
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0;
                    msg.angular.z = 1.5;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                    msg.linear.x = 0;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 2; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0.5;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 3; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0;
                    msg.angular.z = 1.5;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                    msg.linear.x = 0;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                }
                
                ros::Duration(1).sleep();
                flag = !flag;
            }
            
            else
            {
                
                for (int i = 0; i < 2; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = -0.3;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 3; i++)
                {        
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0;
                    msg.angular.z = -1.4;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 2; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0.5;
                    msg.angular.z = 0;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();

                for (int i = 0; i < 3; i++)
                {
                    geometry_msgs::Twist msg;
                    msg.linear.x = 0;
                    msg.angular.z = -1.4;
                    pub_twist.publish(msg);
                    ros::Duration(0.5).sleep();
                }

                ros::Duration(1).sleep();
                flag = !flag;
            }
        }

        else if (msg->bumper == 0)
        {
            ROS_INFO("Left bumper activated!");

            //indsæt left bumper resultat her
        }
    
        else if (msg->bumper == 2)
        {
            ROS_INFO("Right bumper activated!");

            //indsæt right bumper resultat her        
        }
    }
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "Hello World");
    ros::NodeHandle n;
    sub_bumper = n.subscribe("/mobile_base/events/bumper", 1, clbk_bumper);
    pub_twist = n.advertise<geometry_msgs::Twist>("/cmd_vel_mux/input/teleop", 1000);
    pub_accl = n.advertise<geometry_msgs::Accel>("/cmd_vel_mux/input/teleop", 1000);
    
    for (int ever = 1; ros::ok && ever > 0; ever++)
    {
        dist++;
        geometry_msgs::Twist msg;
        msg.linear.x = 0.3;
        msg.angular.z = 0;
        pub_twist.publish(msg);
        std::cout << dist << " " << total_dist << std::endl;
        ros::Duration(0.5).sleep();       
        ros::spinOnce();
        if (total_dist == dist)
        {
            std::cout << "For langt... STOP!!" << std::endl;
            route_bot();
        }
    }

    return 0;
}
